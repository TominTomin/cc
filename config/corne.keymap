/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        home {
            bindings = <&to 0>;
            key-positions = <38 39>;
        };

        leftfffff {
            bindings = <&tog 4>;
            key-positions = <38 0>;
        };

        rightfff {
            bindings = <&tog 4>;
            key-positions = <39 11>;
        };

        bluyee {
            bindings = <&to 3>;
            key-positions = <0 11>;
        };

        tempf {
            bindings = <&mo 4>;
            key-positions = <37 40>;
        };

        to5key {
            bindings = <&to 5>;
            key-positions = <0 35>;
        };
    };

    behaviors {
        spacecontrolrtn: spacecontrolrtn {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACECONTROLRTN";
            #binding-cells = <0>;
            bindings = <&mt LEFT_CONTROL SPACE>, <&kp RET>;

            tapping-term-ms = <350>;
        };

        backspace: backspace {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp BACKSPACE>;

            tapping-term-ms = <250>;
        };

        enter: enter {
            compatible = "zmk,behavior-tap-dance";
            label = "ENTER";
            #binding-cells = <0>;
            bindings = <&kp F>, <&kp ENTER>;

            tapping-term-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &mt DEL Q  &kp W  &kp E     &kp R  &mt ESCAPE T        &kp Y                 &kp U       &kp I          &kp O    &mt BACKSPACE P   &none
&none  &mt TAB A  &kp S  &kp D     &kp F  &kp G               &kp H                 &backspace  &kp K          &kp L    &kp SEMI          &none
&none  &kp Z      &kp X  &kp C     &kp V  &kp B               &kp N                 &kp M       &mt SQT COMMA  &kp DOT  &mt ESCAPE SLASH  &none
                         &kp LGUI  &mo 2  &spacecontrolrtn    &mt LEFT_SHIFT ENTER  &mo 1       &kp RALT
            >;
        };

        numbers {
            bindings = <
&mt RIGHT_PARENTHESIS LEFT_PARENTHESIS  &mt ASTERISK SLASH  &mt AMPERSAND KP_NUMBER_7    &mt ASTERISK KP_NUMBER_8  &mt LEFT_PARENTHESIS KP_NUMBER_9  &mt RIGHT_PARENTHESIS KP_NUMBER_0    &mt ASTERISK SLASH  &mt AMPERSAND N7     &mt ASTERISK N8       &mt LEFT_PARENTHESIS N9  &mt RIGHT_PARENTHESIS N0  &trans
&mt RIGHT_BRACE LEFT_BRACE              &mt UNDER MINUS     &mt DOLLAR KP_NUMBER_4       &mt PERCENT KP_NUMBER_5   &mt CARET KP_NUMBER_6             &kp COLON                            &mt UNDER MINUS     &mt DOLLAR NUMBER_4  &mt PERCENT N5        &mt CARET NUMBER_6       &kp COLON                 &mt GREATER_THAN LESS_THAN
&mt RIGHT_BRACKET LEFT_BRACKET          &mt PLUS EQUAL      &mt EXCLAMATION KP_NUMBER_1  &mt AT_SIGN KP_NUMBER_2   &mt HASH KP_NUMBER_3              &mt PLUS EQUAL                       &mt PLUS EQUAL      &mt EXCL NUMBER_1    &mt AT_SIGN NUMBER_2  &mt HASH NUMBER_3        &kp DOT                   &trans
                                                                                         &trans                    &trans                            &trans                               &trans              &trans               &trans
            >;
        };

        mouse {
            bindings = <
&mt DELETE BACKSPACE  &trans  &kp LA(LEFT)  &kp UP     &kp LA(RIGHT)  &mt LA(F4) ENTER    &kp C_VOLUME_UP    &trans    &kp UP     &trans     &trans     &trans
&trans                &trans  &kp LEFT      &kp DOWN   &kp RIGHT      &trans              &kp C_VOLUME_DOWN  &kp LEFT  &kp DOWN   &kp RIGHT  &trans     &trans
&trans                &trans  &kp LC(X)     &kp LC(C)  &kp LC(V)      &mkp MCLK           &kp K_MUTE         &trans    &trans     &trans     &mkp MCLK  &mkp LCLK
                                            &mkp RCLK  &mkp MCLK      &mkp LCLK           &trans             &trans    &mkp RCLK
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &bt BT_CLR_ALL  &bt BT_CLR    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &trans
&trans  &trans  &trans  &trans  &trans          &trans        &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &trans
&trans  &trans  &trans  &trans  &trans          &trans        &trans         &trans         &trans         &trans         &trans         &trans
                        &trans  &trans          &trans        &trans         &trans         &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10    &kp F10  &kp F7  &kp F8  &kp F9  &trans  &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &kp F11  &kp F4  &kp F5  &kp F6  &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12    &kp F12  &kp F1  &kp F2  &kp F3  &trans  &trans
                        &trans  &trans  &trans     &trans   &trans  &trans
            >;
        };

        layer_5dd {
            bindings = <
&none  &kp Q      &kp W  &kp E   &kp R   &kp T               &kp Y   &kp U       &kp I      &kp O    &kp P     &none
&none  &mt TAB A  &kp S  &kp D   &enter  &kp G               &kp H   &backspace  &kp K      &kp L    &kp SEMI  &none
&none  &kp Z      &kp X  &kp C   &kp V   &kp B               &kp N   &kp M       &kp COMMA  &kp DOT  &kp FSLH  &trans
                         &trans  &tog 2  &spacecontrolrtn    &trans  &tog 1      &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
