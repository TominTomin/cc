/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&sk { release-after-ms = <3000>; };

/ {
    combos {
        compatible = "zmk,combos";

        home {
            bindings = <&to 0>;
            key-positions = <38 39>;
        };

        bluyee {
            bindings = <&to 3>;
            key-positions = <1 10>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <14 16>;
        };

        escy {
            bindings = <&kp ESCAPE>;
            key-positions = <19 21>;
        };

        otoenter {
            bindings = <&kp ENTER>;
            key-positions = <26 28>;
        };

        oshift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <2 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none    &kp Q  &kp W  &kp E     &kp R  &kp T                     &kp Y                 &kp U  &kp I          &kp O    &kp P      &none
&kp TAB  &kp A  &kp S  &kp D     &kp F  &kp G                     &kp H                 &kp J  &kp K          &kp L    &kp SEMI   &kp LC(BACKSPACE)
&none    &kp Z  &kp X  &kp C     &kp V  &kp B                     &kp N                 &kp M  &mt SQT COMMA  &kp DOT  &kp SLASH  &none
                       &kp LGUI  &mo 2  &mt LEFT_CONTROL SPACE    &mt LEFT_SHIFT ENTER  &mo 1  &kp RALT
            >;
        };

        numbers {
            bindings = <
&none   &mt ASTERISK SLASH  &kp F7  &kp F8  &kp F9  &kp F10    &mt ASTERISK SLASH  &kp N7  &kp N8  &kp N9  &kp N0     &none
&trans  &mt UNDER MINUS     &kp F4  &kp F5  &kp F6  &kp F11    &mt UNDER MINUS     &kp N4  &kp N5  &kp N6  &kp COLON  &kp BACKSPACE
&none   &mt PLUS EQUAL      &kp F1  &kp F2  &kp F3  &kp F12    &mt PLUS EQUAL      &kp N1  &kp N2  &kp N3  &kp DOT    &none
                                    &trans  &trans  &trans     &trans              &trans  &trans
            >;
        };

        nav {
            bindings = <
&none    &none   &kp LA(LEFT)  &kp UP            &kp LA(RIGHT)   &mt LA(F4) ENTER    &kp C_VOLUME_UP    &trans    &kp UP     &trans     &trans     &none
&kp DEL  &trans  &kp LEFT      &kp DOWN          &kp RIGHT       &sl 5               &kp C_VOLUME_DOWN  &kp LEFT  &kp DOWN   &kp RIGHT  &trans     &kp DEL
&none    &trans  &sk LEFT_WIN  &sk LEFT_CONTROL  &sk LEFT_SHIFT  &sk LEFT_ALT        &kp K_MUTE         &trans    &mkp RCLK  &mkp LCLK  &mkp MCLK  &none
                               &mkp RCLK         &mkp MCLK       &mkp LCLK           &trans             &trans    &trans
            >;
        };

        bluetooth {
            bindings = <
&trans  &trans  &trans  &trans  &bt BT_CLR_ALL  &bt BT_CLR    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &trans
&trans  &trans  &trans  &trans  &trans          &trans        &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &trans
&trans  &trans  &trans  &trans  &trans          &trans        &trans         &trans         &trans         &trans         &trans         &trans
                        &trans  &trans          &trans        &trans         &trans         &trans
            >;
        };

        fffkeys {
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10    &kp F10  &kp F7  &kp F8  &kp F9  &trans  &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &kp F11  &kp F4  &kp F5  &kp F6  &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12    &kp F12  &kp F1  &kp F2  &kp F3  &trans  &trans
                        &trans  &trans  &trans     &trans   &trans  &trans
            >;
        };

        symballs {
            bindings = <
&none   &kp LEFT_PARENTHESIS  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp TILDE  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RPAR           &none
&trans  &kp LEFT_BRACE        &kp DOLLAR       &kp PERCENT   &kp LCTRL             &kp MINUS                &kp PLUS   &kp DOLLAR       &kp PERCENT   &kp CARET             &kp RIGHT_BRACE    &trans
&none   &kp LEFT_BRACKET      &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp UNDERSCORE           &kp EQUAL  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp RIGHT_BRACKET  &none
                                               &trans        &trans                &trans                   &none      &trans           &trans
            >;
        };

        layeroflay {
            bindings = <
&trans  &to 5   &to 4         &none             &to 2           &to 1           &to 1         &to 2           &none             &to 4         &to 5   &trans
&trans  &trans  &sk LEFT_ALT  &sk LEFT_CONTROL  &sk LEFT_SHIFT  &sk LEFT_WIN    &sk LEFT_WIN  &sk LEFT_SHIFT  &sk LEFT_CONTROL  &sk LEFT_ALT  &trans  &kp BACKSPACE
&trans  &trans  &trans        &trans            &trans          &trans          &trans        &trans          &trans            &trans        &trans  &trans
                              &trans            &to 0           &trans          &trans        &to 0           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        testss {
            if-layers = <1 2>;
            then-layer = <6>;
        };
    };
};
